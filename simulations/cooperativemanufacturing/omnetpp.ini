[General]
network = d6g.simulations.cooperativemanufacturing.CooperativeManufacturing
sim-time-limit = 10s
description = "Baseline Scenario with 6gDetCom node"

**.bridging.pairwiseDelayLayer.egress.delay = 1ms

**.displayGateSchedules = false
**.gateFilter = "**.eth[1].**"
**.gateScheduleVisualizer.height = 16
**.gateScheduleVisualizer.placementHint = "top"


[OnlyAgvToCell]
# client applications
*.agv1.interToCell.numApps = 1
*.agv2.interToCell.numApps = 1

*.processingCell.swarmStatus.numApps = 2

*.agv1.interToCell.app[0].typename = "UdpSourceApp"
*.agv1.interToCell.app[0].display-name = "swarmStatus1"
*.agv1.interToCell.app[0].io.destAddress = "processingCell.swarmStatus"
*.agv1.interToCell.app[0].io.destPort = 1000
*.agv1.interToCell.app[0].source.packetLength = 1000B - 58B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.agv1.interToCell.app[0].source.productionInterval = 1ms

*.processingCell.swarmStatus.app[0].typename = "UdpSinkApp"
*.processingCell.swarmStatus.app[0].io.localPort = 1000

*.agv2.interToCell.app[0].typename = "UdpSourceApp"
*.agv2.interToCell.app[0].display-name = "swarmStatus2"
*.agv2.interToCell.app[0].io.destAddress = "processingCell.swarmStatus"
*.agv2.interToCell.app[0].io.destPort = 1001
*.agv2.interToCell.app[0].source.packetLength = 1000B - 58B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.agv2.interToCell.app[0].source.productionInterval = 1ms
*.agv2.interToCell.app[0].source.initialProductionOffset = 80960ns

*.processingCell.swarmStatus.app[1].typename = "UdpSinkApp"
*.processingCell.swarmStatus.app[1].io.localPort = 1001

# enable outgoing streams
**.hasOutgoingStreams = true
**.streamIdentifier.identifier.mapping = [{stream: "swarmStatus1", packetFilter: expr(udp.destPort == 1000)},
                                                   {stream: "swarmStatus2", packetFilter: expr(udp.destPort == 1001)}]

**.streamCoder.*.mapping = [{stream: "swarmStatus1", pcp: 7},
									 {stream: "swarmStatus2", pcp: 7}]

[ConstantDelay]
extends = OnlyAgvToCell
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("constant.xml")

[OneVariable]
extends = OnlyAgvToCell
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("onevariable.xml")

[AllVariable]
extends = OnlyAgvToCell
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("bothvariable.xml")

[Gcl]
*.detcom.eth[*].macLayer.queue.transmissionGate[0].initiallyOpen = false
*.detcom.eth[*].macLayer.queue.transmissionGate[0].offset = 0s
*.detcom.eth[*].macLayer.queue.transmissionGate[0].durations = []

*.detcom.eth[*].macLayer.queue.transmissionGate[1].initiallyOpen = true
*.detcom.eth[*].macLayer.queue.transmissionGate[1].offset = 819.95us
*.detcom.eth[*].macLayer.queue.transmissionGate[1].durations = [161us,839us]

[ConstantGcl]
extends = ConstantDelay,Gcl

[OneVariableGcl]
extends = OneVariable,Gcl

[OneVariableGclLongerOpen]
# For 100us, 10us the 99.9% confidence interval is ~33, thus we open the GCL 33us earlier and close it 33us later
# S1: 33us buffer + 80us open + 33us buffer
# + 1us IFG
# S2: +80us open
# = 227us
*.detcom.eth[*].macLayer.queue.transmissionGate[1].durations = [227us,773us]
# We also need to move the offset to open the GCL 33us earlier:
*.detcom.eth[*].macLayer.queue.transmissionGate[1].offset = 852.95us
extends = OneVariable,Gcl

[OneVariableGclMaximizeGap]
# For 100us, 10us the 99.9% confidence interval is ~33, thus we open the GCL 33us earlier and close it 33us later

# We need to move the offset to open the GCL 33us earlier:
*.detcom.eth[*].macLayer.queue.transmissionGate[1].offset = 852.95us
# S1: 33us buffer + 80us open + 33us buffer = 146us open
# S2: 80us open
# S2 is scheduled 500us after S1, so the gap is 500us-
*.detcom.eth[*].macLayer.queue.transmissionGate[1].durations = [146us,387us,80us,387us]

# Adjust initialProductionOffset
*.agv2.interToCell.app[0].source.initialProductionOffset = 500us
extends = OneVariable,Gcl

[BothVariableGclMaximizeGap]
# For 100us, 10us the 99.9% confidence interval is ~33, thus we open the GCL 33us earlier and close it 33us later

# We need to move the offset to open the GCL 33us earlier:
*.detcom.eth[*].macLayer.queue.transmissionGate[1].offset = 852.95us
# S1: 33us buffer + 80us open + 33us buffer = 146us open
# S2: 80us open
# S2 is scheduled 500us after S1, so the gap is 500us-
*.detcom.eth[*].macLayer.queue.transmissionGate[1].durations = [146000ns,354000ns,146000ns,354000ns]

# Adjust initialProductionOffset
*.agv2.interToCell.app[0].source.initialProductionOffset = 500us
extends = AllVariable,Gcl


#*.agv1.interAgv.app[0].typename = "UdpSourceApp"
#*.agv1.interAgv.app[0].display-name = "interAgv1"
#*.agv1.interAgv.app[0].io.destAddress = "agv2.interAgv"
#*.agv1.interAgv.app[0].io.destPort = 1000
#*.agv1.interAgv.app[0].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
#*.agv1.interAgv.app[0].source.productionInterval = 10ms

# inter agv 1 to 2
#*.agv1.interAgv.app[0].typename = "UdpSourceApp"
#*.agv1.interAgv.app[0].display-name = "interAgv1"
#*.agv1.interAgv.app[0].io.destAddress = "agv2.interAgv"
#*.agv1.interAgv.app[0].io.destPort = 1000
#*.agv1.interAgv.app[0].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
#*.agv1.interAgv.app[0].source.productionInterval = 10ms

#*.agv2.interAgv.app[0].typename = "UdpSinkApp"
#*.agv2.interAgv.app[0].io.localPort = 1000


# interagv 2 to 1
#*.agv2.interAgv.app[1].typename = "UdpSourceApp"
#*.agv2.interAgv.app[1].display-name = "interAgv2"
#*.agv2.interAgv.app[1].io.destAddress = "agv1.interAgv"
#*.agv2.interAgv.app[1].io.destPort = 1000
#*.agv2.interAgv.app[1].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
#*.agv2.interAgv.app[1].source.productionInterval = 10ms

#*.agv1.interAgv.app[1].typename = "UdpSinkApp"
#*.agv1.interAgv.app[1].io.localPort = 1000


# swarm status
#*.agv1.interToCell.app[0].typename = "UdpSourceApp"
#*.agv1.interToCell.app[0].display-name = "swarmStatus1"
#*.agv1.interToCell.app[0].io.destAddress = "processingCell.swarmStatus"
#*.agv1.interToCell.app[0].io.destPort = 1000
#*.agv1.interToCell.app[0].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
#*.agv1.interToCell.app[0].source.productionInterval = 10ms

#*.processingCell.swarmStatus.app[0].typename = "UdpSinkApp"
#*.processingCell.swarmStatus.app[0].io.localPort = 1000

#*.agv2.interToCell.app[0].typename = "UdpSourceApp"
#*.agv2.interToCell.app[0].display-name = "swarmStatus2"
#*.agv2.interToCell.app[0].io.destAddress = "processingCell.swarmStatus"
#*.agv2.interToCell.app[0].io.destPort = 1001
#*.agv2.interToCell.app[0].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
#*.agv2.interToCell.app[0].source.productionInterval = 10ms

#*.processingCell.swarmStatus.app[1].typename = "UdpSinkApp"
#*.processingCell.swarmStatus.app[1].io.localPort = 1001


# swarm control
#*.processingCell.swarmControl.app[0].typename = "UdpSourceApp"
#*.processingCell.swarmControl.app[0].display-name = "swarmControl1"
#*.processingCell.swarmControl.app[0].io.destAddress = "agv1.interToCell"
#*.processingCell.swarmControl.app[0].io.destPort = 1000
#*.processingCell.swarmControl.app[0].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
#*.processingCell.swarmControl.app[0].source.productionInterval = 10ms

#*.agv1.interToCell.app[1].typename = "UdpSinkApp"
#*.agv1.interToCell.app[1].io.localPort = 1000

#*.processingCell.swarmControl.app[1].typename = "UdpSourceApp"
#*.processingCell.swarmControl.app[1].display-name = "swarmControl2"
#*.processingCell.swarmControl.app[1].io.destAddress = "agv2.interToCell"
#*.processingCell.swarmControl.app[1].io.destPort = 1000
#*.processingCell.swarmControl.app[1].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
#*.processingCell.swarmControl.app[1].source.productionInterval = 10ms

#*.agv2.interToCell.app[1].typename = "UdpSinkApp"
#*.agv2.interToCell.app[1].io.localPort = 1000


