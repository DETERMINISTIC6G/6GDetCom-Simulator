[General]
sim-time-limit = 30s
description = "Tutorial 2"
network = d6g.simulations.training_day.solution2.NetworkSolution2

**.hasOutgoingStreams = true
*.listener.numApps = 2
*.listener.app[*].typename = "UdpSinkApp"
*.listener.app[0].io.localPort = 1042
*.listener.app[1].io.localPort = 1043

**.streamIdentifier.identifier.mapping = [{stream: "stream1", packetFilter: expr(udp.destPort == 1042)},
                                          {stream: "stream2", packetFilter: expr(udp.destPort == 1043)}]

**.streamCoder.*.mapping = [{stream: "stream1", pcp: 7},
						    {stream: "stream2", pcp: 6}]

**.numTrafficClasses = 7

[Task1]
extends = General
*.talker1.numApps = 1
*.talker1.hasOutgoingStreams = true
*.talker1.app[*].typename = "UdpSourceApp"
*.talker1.app[*].display-name = "stream1"
*.talker1.app[*].io.destAddress = "listener"
*.talker1.app[*].source.packetLength = 100B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.talker1.app[0].io.destPort = 1042
*.talker1.app[0].source.productionInterval = 10ms

# Task 1a)
# This task only takes place in the network_tutorial2.ned file.
# Your task is to change the type of the detCom device to a DetCom node.
# 
# Make yourself familiar with the structure of the DetCom node:
# https://deterministic6g.github.io/deterministic6g/doc/neddoc/d6g.devices.DetCom.html
# 
# The listener should be connected to the network side of the simulator.
# All other devices should be connected as wireless devices.

# Task 1b)
# Confirm that your network works as intended.
# 1. Run the simulation
# 2. Create an .anf file and generate a graph that shows the end to end delay (meanBitLifetimePerPacket) of each packet.


[Task2]
extends = Task1

*.talker2.numApps = 1
*.talker2.hasOutgoingStreams = true
*.talker2.app[*].typename = "UdpSourceApp"
*.talker2.app[*].display-name = "stream2"
*.talker2.app[*].io.destAddress = "listener"
*.talker2.app[*].source.packetLength = 100B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.talker2.app[0].io.destPort = 1043
*.talker2.app[0].source.productionInterval = 10ms
*.talker2.app[0].source.initialProductionOffset = 5ms

# As you saw in the previous task, the end-to-end delay is static.
# Delays within the DetCom node are typically variable.

# Task 2a)
# Your task is to setup the uplink delay in the DetCom node.
# - The connection of talker1 should use a given Histogram (uplink_given.xml) as a delay source.
# - The connection of talker2 should experience a normal distribution with the following parameters o=2.5ms, u=100us in the DetCom node
# 
# The following documentation might be helpful:
# - Setting up delays in the DetCom node:
# 	https://deterministic6g.github.io/deterministic6g/doc/neddoc/d6g.devices.tsntranslator.TsnTranslator.html
# - Reading Histogram files:
# 	https://deterministic6g.github.io/deterministic6g/doc/neddoc/d6g.distribution.histogram.HistogramContainer.html
# 	The NED function to draw delays from the Histogram: quantity rngProvider(string rngProviderModule, string key?) 
# 		(Example usage here: https://deterministic6g.github.io/deterministic6g/doc/simulations/edgecloud/doc/index.html )

*.histogramContainer.histograms = {Uplink: "../../../deterministic6g_data/PD-Wireless-5G-1/s1-UL_wall.xml", Downlink: "../../../deterministic6g_data/PD-Wireless-5G-1/s10-DL_wall.xml"}
*.detCom.dstt[0].delayUplink = rngProvider("histogramContainer", "uplink")

# Task 2b
# 1. Run the simulation
# 2. In your .anf file, create two Histogram figures showing the end-to-end delays for both streams
# 3. Make sure the Histograms match your expectations (compare the outcoming Histogram with uplink_given.png)

[Task3]
extends = Task2

