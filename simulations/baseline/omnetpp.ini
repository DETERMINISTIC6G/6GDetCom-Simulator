[General]
sim-time-limit = 10s
description = "General configuration"

**.displayGateSchedules = false
**.gateFilter = "**.eth[1].**"
**.gateScheduleVisualizer.height = 16
**.gateScheduleVisualizer.placementHint = "top"

*.histogramUplink.histogramConfig = xmldoc("../../../deterministic6g_data_internal/5g-kth/s1_wall.xml")
*.histogramDownlink.histogramConfig = xmldoc("../../../deterministic6g_data_internal/5g-kth/s10-DL_wall.xml")


[Unidirectional_LeftToRight]
description = "Basic configuration for networks with a unidirectional communication from left to right"
# client applications
*.device1.numApps = 1
*.device1.app[0].typename = "UdpSourceApp"
*.device1.app[0].io.destAddress = "device2"
*.device1.app[0].io.destPort = 1001
*.device1.app[0].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.device1.app[0].source.productionInterval = 10ms

# enable outgoing streams
*.device1.hasOutgoingStreams = true

# server applications
*.device2.numApps = 1
*.device2.app[0].typename = "UdpSinkApp"
*.device2.app[0].io.localPort = 1001


[Unidirectional_RightToLeft]
description = "Basic configuration for networks with a unidirectional communication from right to left"
# client applications
*.device2.numApps = 1
*.device2.app[0].typename = "UdpSourceApp"
*.device2.app[0].io.destAddress = "device1"
*.device2.app[0].io.destPort = 1001
*.device2.app[0].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.device2.app[0].source.productionInterval = 10ms
# enable outgoing streams
*.device2.hasOutgoingStreams = true


# server applications
*.device1.numApps = 1
*.device1.app[0].typename = "UdpSinkApp"
*.device1.app[0].io.localPort = 1001


[Bidirectional]
description = "Basic configuration for networks with a bidirectional communication"
# client applications
*.device1.numApps = 2
*.device1.app[0].typename = "UdpSourceApp"
*.device1.app[0].io.destAddress = "device2"
*.device1.app[0].io.destPort = 1001
*.device1.app[0].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.device1.app[0].source.productionInterval = 10ms

*.device1.app[1].typename = "UdpSinkApp"
*.device1.app[1].io.localPort = 1002

# enable outgoing streams
*.device1.hasOutgoingStreams = true


# server applications
*.device2.numApps = 2
*.device2.app[0].typename = "UdpSinkApp"
*.device2.app[0].io.localPort = 1001

*.device2.app[1].typename = "UdpSourceApp"
*.device2.app[1].io.destAddress = "device1"
*.device2.app[1].io.destPort = 1002
*.device2.app[1].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.device2.app[1].source.productionInterval = 10ms
# enable outgoing streams
*.device2.hasOutgoingStreams = true

### BaselineWirelessDeviceWirelessBridge
[BaselineWirelessDeviceWirelessBridge_Unidirectional_LeftToRight]
description = "Network with a wireless device connected on the left and wireless bridge connected on the right side. (Unidirectional Left->Right)"
network = BaselineWirelessDeviceWirelessBridge
extends = Unidirectional_LeftToRight
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("delays_wireless_wireless.xml")


[BaselineWirelessDeviceWirelessBridge_Unidirectional_RightToLeft]
description = "Network with a wireless device connected on the left and wireless bridge connected on the right side. (Unidirectional Right->Left)"
network = BaselineWirelessDeviceWirelessBridge
extends = Unidirectional_RightToLeft
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("delays_wireless_wireless.xml")

[BaselineWirelessDeviceWirelessBridge_Bidirectional]
description = "Network with a wireless device connected on the left and wireless bridge connected on the right side. (Bidirectional)"
network = BaselineWirelessDeviceWirelessBridge
extends = Bidirectional
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("delays_wireless_wireless.xml")


### BaselineWirelessDeviceWirelessDevice
[BaselineWirelessDeviceWirelessDevice_Unidirectional_LeftToRight]
description = "Network with a wireless device connected on the left and wireless device connected on the right side. (Unidirectional Left->Right)"
network = BaselineWirelessDeviceWirelessDevice
extends = Unidirectional_LeftToRight
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("delays_wireless_wireless.xml")

[BaselineWirelessDeviceWirelessDevice_Unidirectional_RightToLeft]
description = "Network with a wireless device connected on the left and wireless device connected on the right side. (Unidirectional Right->Left)"
network = BaselineWirelessDeviceWirelessDevice
extends = Unidirectional_RightToLeft
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("delays_wireless_wireless.xml")

[BaselineWirelessDeviceWirelessDevice_Bidirectional]
description = "Network with a wireless device connected on the left and wireless device connected on the right side. (Bidirectional)"
network = BaselineWirelessDeviceWirelessDevice
extends = Bidirectional
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("delays_wireless_wireless.xml")


### BaselineWirelessBridgeWirelessBridge
[BaselineWirelessBridgeWirelessBridge_Unidirectional_LeftToRight]
description = "Network with a wireless bridge connected on the left and wireless bridge connected on the right side. (Unidirectional Left->Right)"
network = BaselineWirelessBridgeWirelessBridge
extends = Unidirectional_LeftToRight
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("delays_wireless_wireless.xml")

[BaselineWirelessBridgeWirelessBridge_Unidirectional_RightToLeft]
description = "Network with a wireless bridge connected on the left and wireless bridge connected on the right side. (Unidirectional Right->Left)"
network = BaselineWirelessBridgeWirelessBridge
extends = Unidirectional_RightToLeft
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("delays_wireless_wireless.xml")

[BaselineWirelessBridgeWirelessBridge_Bidirectional]
description = "Network with a wireless bridge connected on the left and wireless bridge connected on the right side. (Bidirectional)"
network = BaselineWirelessBridgeWirelessBridge
extends = Bidirectional
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("delays_wireless_wireless.xml")


### BaselineWirelessDeviceWiredBridge
[BaselineWirelessDeviceWiredBridge_Unidirectional_LeftToRight]
description = "Network with a wireless device connected on the left and wired bridge connected on the right side. (Unidirectional Left->Right)"
network = BaselineWirelessDeviceWiredBridge
extends = Unidirectional_LeftToRight
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("delays_wireless_wired.xml")

[BaselineWirelessDeviceWiredBridge_Unidirectional_RightToLeft]
description = "Network with a wireless device connected on the left and wired bridge connected on the right side. (Unidirectional Right->Left)"
network = BaselineWirelessDeviceWiredBridge
extends = Unidirectional_RightToLeft
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("delays_wireless_wired.xml")

[BaselineWirelessDeviceWiredBridge_Bidirectional]
description = "Network with a wireless device connected on the left and wired bridge connected on the right side. (Bidirectional)"
network = BaselineWirelessDeviceWiredBridge
extends = Bidirectional
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("delays_wireless_wired.xml")



### BaselineWirelessBridgeWiredBridge
[BaselineWirelessBridgeWiredBridge_Unidirectional_LeftToRight]
description = "Network with a wireless bridge connected on the left and wired bridge connected on the right side. (Unidirectional Left->Right)"
network = BaselineWirelessBridgeWiredBridge
extends = Unidirectional_LeftToRight
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("delays_wireless_wired.xml")

[BaselineWirelessBridgeWiredBridge_Unidirectional_RightToLeft]
description = "Network with a wireless bridge connected on the left and wired bridge connected on the right side. (Unidirectional Right->Left)"
network = BaselineWirelessBridgeWiredBridge
extends = Unidirectional_RightToLeft
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("delays_wireless_wired.xml")

[BaselineWirelessBridgeWiredBridge_Bidirectional]
description = "Network with a wireless bridge connected on the left and wired bridge connected on the right side. (Bidirectional)"
network = BaselineWirelessBridgeWiredBridge
extends = Bidirectional
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("delays_wireless_wired.xml")


### BaselineWirelessDeviceWiredDevice
[BaselineWirelessDeviceWiredDevice_Unidirectional_LeftToRight]
description = "Network with a wireless device connected on the left and wired device connected on the right side. (Unidirectional Left->Right)"
network = BaselineWirelessDeviceWiredDevice
extends = Unidirectional_LeftToRight
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("delays_wireless_wired.xml")

[BaselineWirelessDeviceWiredDevice_Unidirectional_RightToLeft]
description = "Network with a wireless device connected on the left and wired device connected on the right side. (Unidirectional Right->Left)"
network = BaselineWirelessDeviceWiredDevice
extends = Unidirectional_RightToLeft
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("delays_wireless_wired.xml")

[BaselineWirelessDeviceWiredDevice_Bidirectional]
description = "Network with a wireless device connected on the left and wired device connected on the right side. (Bidirectional)"
network = BaselineWirelessDeviceWiredDevice
extends = Bidirectional
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("delays_wireless_wired.xml")

### BaselineWirelessBridgeWiredDevice
[BaselineWirelessBridgeWiredDevice_Unidirectional_LeftToRight]
description = "Network with a wireless bridge connected on the left and wired device connected on the right side. (Unidirectional Left->Right)"
network = BaselineWirelessBridgeWiredDevice
extends = Unidirectional_LeftToRight
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("delays_wireless_wired.xml")

[BaselineWirelessBridgeWiredDevice_Unidirectional_RightToLeft]
description = "Network with a wireless bridge connected on the left and wired device connected on the right side. (Unidirectional Right->Left)"
network = BaselineWirelessBridgeWiredDevice
extends = Unidirectional_RightToLeft
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("delays_wireless_wired.xml")

[BaselineWirelessBridgeWiredDevice_Bidirectional]
description = "Network with a wireless bridge connected on the left and wired device connected on the right side. (Bidirectional)"
network = BaselineWirelessBridgeWiredDevice
extends = Bidirectional
*.detcom.bridging.pairwiseDelayLayer.egress.delayConfig = xmldoc("delays_wireless_wired.xml")
