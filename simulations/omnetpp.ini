[General]
network = inet.networks.tsn.TsnLinearNetwork
sim-time-limit = 10s
description = "Traffic shaping using time-aware shapers"

**.displayGateSchedules = true
**.gateFilter = "**.eth[1].**"
**.gateScheduleVisualizer.height = 16
**.gateScheduleVisualizer.placementHint = "top"

# client applications
*.client.numApps = 1
*.client.app[*].typename = "UdpSourceApp"
*.client.app[0].display-name = "best effort"
*.client.app[1].display-name = "video"
*.client.app[*].io.destAddress = "server"
*.client.app[0].io.destPort = 1000
*.client.app[1].io.destPort = 1001
*.client.app[*].source.packetLength = 1000B - 54B # 54B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.client.app[0].source.productionInterval = 1ms # ~40Mbps
*.client.app[1].source.initialProductionOffest = 100s # ~40Mbps
*.client.app[1].source.productionInterval = 100s # ~40Mbps
#*.client.app[1].source.productionInterval = exponential(400us) # ~20Mbps

# ----------------------------- delayer -----------------------------
#*.switch.bridging.directionReverser.delayer.typename="PKDelayer" # For testing
#*.switch.bridging.directionReverser.delayer.typename="PacketDelayer"
*.switch.bridging.typename = "BridgingLayerWithPairwiseDelay"
*.switch.bridging.pairwiseDelayLayer.egress.delay = 1ms
# -----   -----   -----   -----   -----   -----   -----   -----   ---
#*.switch.bridging.directionReverser.delayer.delay = static(truncnormal(10us, 2us))
*.switch.bridging.directionReverser.delayer.delay = randonwalk(20us, uniform(-10us, 10us))
# ... + randomwalk(intitialValue, distribution) # randomwalk(10us, uniform(-1us, 1us))
#*.switch.bridging.directionReverser.delayer.delay = 1us
#*.switch.bridging.directionReverser.delayer.delay = uniform(normal(10us, 1us), normal(20us, 1us))
#*.switch.bridging.directionReverser.delayer.delay = truncnormal(10us, 5us)
# ----------------------------- ------- -----------------------------

# server applications
*.server.numApps = 2
*.server.app[*].typename = "UdpSinkApp"
*.server.app[0].io.localPort = 1000
*.server.app[1].io.localPort = 1001

# enable outgoing streams
*.client.hasOutgoingStreams = true

# client stream identification
*.client.bridging.streamIdentifier.identifier.mapping = [{stream: "best effort", packetFilter: expr(udp.destPort == 1000)},
                                                         {stream: "video", packetFilter: expr(udp.destPort == 1001)}]

# client stream encoding
*.client.bridging.streamCoder.encoder.mapping = [{stream: "best effort", pcp: 0},
                                                 {stream: "video", pcp: 4}]

# enable egress traffic shaping
*.switch.hasEgressTrafficShaping = true

# disable forwarding IEEE 802.1Q C-Tag
*.switch.bridging.directionReverser.reverser.excludeEncapsulationProtocols = ["ieee8021qctag"]

# time-aware traffic shaping
*.switch.eth[*].macLayer.queue.numTrafficClasses = 2
*.switch.eth[*].macLayer.queue.*[0].display-name = "best effort"
*.switch.eth[*].macLayer.queue.*[1].display-name = "video"